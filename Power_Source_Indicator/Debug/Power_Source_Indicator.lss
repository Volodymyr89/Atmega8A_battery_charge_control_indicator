
Power_Source_Indicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba1  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000828  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000697  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00001d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004da  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025d  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000025f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	4b c0       	rjmp	.+150    	; 0xa8 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a3 36       	cpi	r26, 0x63	; 99
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	41 d0       	rcall	.+130    	; 0xc6 <main>
  44:	9f c0       	rjmp	.+318    	; 0x184 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_enable>:
 */ 

	#include "ADC_lib.h"
	
void adc_enable(bool adc_enable){
	if (adc_enable){
  48:	88 23       	and	r24, r24
  4a:	21 f0       	breq	.+8      	; 0x54 <adc_enable+0xc>
		ADCSRA |= 1<<ADEN;
  4c:	86 b1       	in	r24, 0x06	; 6
  4e:	80 68       	ori	r24, 0x80	; 128
  50:	86 b9       	out	0x06, r24	; 6
  52:	08 95       	ret
	}
	else{
		ADCSRA &= ~(1<<ADEN);
  54:	86 b1       	in	r24, 0x06	; 6
  56:	8f 77       	andi	r24, 0x7F	; 127
  58:	86 b9       	out	0x06, r24	; 6
  5a:	08 95       	ret

0000005c <adc_init>:
	}
}
void adc_init(void){
	adc_enable(false);
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	f4 df       	rcall	.-24     	; 0x48 <adc_enable>
	ADMUX |= 1<<REFS0 | 1<<REFS1; // select ref source, and left align
  60:	87 b1       	in	r24, 0x07	; 7
  62:	80 6c       	ori	r24, 0xC0	; 192
  64:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 1<<ADPS0 | 1<<ADPS1 | 1<<ADPS2; // 128 prescaler
  66:	86 b1       	in	r24, 0x06	; 6
  68:	87 60       	ori	r24, 0x07	; 7
  6a:	86 b9       	out	0x06, r24	; 6
  6c:	08 95       	ret

0000006e <adc_select_adc0_channel>:
}

void adc_select_adc0_channel(void){
	ADMUX &= ~(1<<MUX0); //sel 0 channel
  6e:	87 b1       	in	r24, 0x07	; 7
  70:	8e 7f       	andi	r24, 0xFE	; 254
  72:	87 b9       	out	0x07, r24	; 7
  74:	08 95       	ret

00000076 <adc_select_adc1_channel>:
}

void adc_select_adc1_channel(void){
	ADMUX |= 1<<MUX0;
  76:	87 b1       	in	r24, 0x07	; 7
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	87 b9       	out	0x07, r24	; 7
  7c:	08 95       	ret

0000007e <adc_start_convertion>:
}



void adc_start_convertion(void){
	ADCSRA |= 1<<ADSC; //start conversion
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	80 64       	ori	r24, 0x40	; 64
  82:	86 b9       	out	0x06, r24	; 6
  84:	08 95       	ret

00000086 <leds_show_status>:
			PORTD |= 1<<(i-1);
		}
}

void leds_show_status(const adc_data_t adc_data, bool charger_plugged_in_status){
	for (uint8_t i=0; i<=3; i++){
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <leds_show_status+0x6>
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	84 30       	cpi	r24, 0x04	; 4
  8e:	e8 f3       	brcs	.-6      	; 0x8a <leds_show_status+0x4>
		//if (adc_data.CH0 <= BATT_LOW){
		//	PORTD |= (1<<i);
		//}
	}
}
  90:	08 95       	ret

00000092 <charger_status>:

bool charger_status(void){
	
	static bool charger_plugged_in;
	
	if(CHARGER_PLUGGED_IN){
  92:	b6 9b       	sbis	0x16, 6	; 22
  94:	04 c0       	rjmp	.+8      	; 0x9e <charger_status+0xc>
		charger_plugged_in = true;
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <charger_status+0x10>
	}
	else{
		charger_plugged_in = false;
  9e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
		return charger_plugged_in;
}
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a6:	08 95       	ret

000000a8 <__vector_8>:

volatile bool isr_run_adc_convertion = false;
bool timer_and_adc_set = false;

ISR(TIMER1_OVF_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  isr_run_adc_convertion=true;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <isr_run_adc_convertion>

}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:



int main(void)
{
	adc_data_t adc_data={0,0};
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	c0 e0       	ldi	r28, 0x00	; 0
	adc_init();
  ca:	c8 df       	rcall	.-112    	; 0x5c <adc_init>
	timer1_init();
  cc:	37 d0       	rcall	.+110    	; 0x13c <timer1_init>
	sei(); // enable global interrupt
  ce:	78 94       	sei
 
    while (1) 
    {
		if (charger_status() && timer_and_adc_set){
  d0:	e0 df       	rcall	.-64     	; 0x92 <charger_status>
  d2:	88 23       	and	r24, r24
  d4:	71 f0       	breq	.+28     	; 0xf2 <main+0x2c>
  d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timer_and_adc_set>
  da:	88 23       	and	r24, r24
  dc:	51 f0       	breq	.+20     	; 0xf2 <main+0x2c>
			timer_and_adc_set = true;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timer_and_adc_set>
			if (timer1_delay(300) == TIMER_OK){
  e4:	8c e2       	ldi	r24, 0x2C	; 44
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	2e d0       	rcall	.+92     	; 0x146 <timer1_delay>
  ea:	81 11       	cpse	r24, r1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x2c>
				adc_enable(true);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	ab df       	rcall	.-170    	; 0x48 <adc_enable>
			}
		}
			if(isr_run_adc_convertion){
  f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <isr_run_adc_convertion>
  f6:	88 23       	and	r24, r24
  f8:	a1 f0       	breq	.+40     	; 0x122 <main+0x5c>
				isr_run_adc_convertion=false;
  fa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <isr_run_adc_convertion>
				adc_select_adc0_channel();
  fe:	b7 df       	rcall	.-146    	; 0x6e <adc_select_adc0_channel>
				adc_start_convertion();
 100:	be df       	rcall	.-132    	; 0x7e <adc_start_convertion>
				while (ADCSRA&(1<<ADSC)){}
 102:	36 99       	sbic	0x06, 6	; 6
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0x3c>
					if(ADCSRA&(1<<ADIF)){
 106:	34 99       	sbic	0x06, 4	; 6
						adc_data.CH0=ADCL;
 108:	d4 b1       	in	r29, 0x04	; 4
					}
				adc_select_adc1_channel();
 10a:	b5 df       	rcall	.-150    	; 0x76 <adc_select_adc1_channel>
				adc_start_convertion();
 10c:	b8 df       	rcall	.-144    	; 0x7e <adc_start_convertion>
				while (ADCSRA&(1<<ADSC)){}
 10e:	36 99       	sbic	0x06, 6	; 6
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x48>
					if(ADCSRA&(1<<ADIF)){
 112:	34 99       	sbic	0x06, 4	; 6
						adc_data.CH1=ADCL;
 114:	c4 b1       	in	r28, 0x04	; 4
					}
				leds_show_status(adc_data, charger_status());
 116:	bd df       	rcall	.-134    	; 0x92 <charger_status>
 118:	68 2f       	mov	r22, r24
 11a:	8d 2f       	mov	r24, r29
 11c:	9c 2f       	mov	r25, r28
 11e:	b3 df       	rcall	.-154    	; 0x86 <leds_show_status>
 120:	d7 cf       	rjmp	.-82     	; 0xd0 <main+0xa>
			}
			else{
					if (timer1_delay(4000) == TIMER_OK){
 122:	80 ea       	ldi	r24, 0xA0	; 160
 124:	9f e0       	ldi	r25, 0x0F	; 15
 126:	0f d0       	rcall	.+30     	; 0x146 <timer1_delay>
 128:	81 11       	cpse	r24, r1
 12a:	02 c0       	rjmp	.+4      	; 0x130 <main+0x6a>
						adc_enable(true);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	8c df       	rcall	.-232    	; 0x48 <adc_enable>
					}
					leds_show_status(adc_data, charger_status());
 130:	b0 df       	rcall	.-160    	; 0x92 <charger_status>
 132:	68 2f       	mov	r22, r24
 134:	8d 2f       	mov	r24, r29
 136:	9c 2f       	mov	r25, r28
 138:	a6 df       	rcall	.-180    	; 0x86 <leds_show_status>
 13a:	ca cf       	rjmp	.-108    	; 0xd0 <main+0xa>

0000013c <timer1_init>:

#include "TIMER0_lib.h"


void timer1_init(void){
	TCCR1B = 0x00; //timer stopped
 13c:	1e bc       	out	0x2e, r1	; 46
	TIMSK |= 1<<TOIE1; // overflow interrupt enable
 13e:	89 b7       	in	r24, 0x39	; 57
 140:	84 60       	ori	r24, 0x04	; 4
 142:	89 bf       	out	0x39, r24	; 57
 144:	08 95       	ret

00000146 <timer1_delay>:
}

timer_status_t  timer1_delay(uint16_t time_period_ms){
	if(time_period_ms <= 4000){
 146:	81 3a       	cpi	r24, 0xA1	; 161
 148:	2f e0       	ldi	r18, 0x0F	; 15
 14a:	92 07       	cpc	r25, r18
 14c:	c8 f4       	brcc	.+50     	; 0x180 <timer1_delay+0x3a>
		uint16_t delay = time_period_ms/64*1000;
 14e:	00 24       	eor	r0, r0
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	00 1c       	adc	r0, r0
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	00 1c       	adc	r0, r0
 15c:	89 2f       	mov	r24, r25
 15e:	90 2d       	mov	r25, r0
 160:	48 ee       	ldi	r20, 0xE8	; 232
 162:	53 e0       	ldi	r21, 0x03	; 3
 164:	84 9f       	mul	r24, r20
 166:	90 01       	movw	r18, r0
 168:	85 9f       	mul	r24, r21
 16a:	30 0d       	add	r19, r0
 16c:	94 9f       	mul	r25, r20
 16e:	30 0d       	add	r19, r0
 170:	11 24       	eor	r1, r1
		uint8_t low_byte = delay & 0xFF;
		uint8_t high_byte = (delay>>8) & 0xFF;
		TCNT1L = low_byte;
 172:	2c bd       	out	0x2c, r18	; 44
		TCNT1H = high_byte;
 174:	3d bd       	out	0x2d, r19	; 45
		TCCR1B |= 1<<CS10 | 1<<CS11; // start timer, 64 divider
 176:	8e b5       	in	r24, 0x2e	; 46
 178:	83 60       	ori	r24, 0x03	; 3
 17a:	8e bd       	out	0x2e, r24	; 46
		return TIMER_OK;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
	}
		return TIMER_ERROR;
 180:	81 e0       	ldi	r24, 0x01	; 1
}
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
